{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@nvd264/ng-dynamic-form/enums/control-types.enum.ts","ng://@nvd264/ng-dynamic-form/enums/error-types.enum.ts","ng://@nvd264/ng-dynamic-form/models/FormControlBase.ts","ng://@nvd264/ng-dynamic-form/models/DropdownControl.ts","ng://@nvd264/ng-dynamic-form/services/form-error.service.ts","ng://@nvd264/ng-dynamic-form/services/form-control.service.ts","ng://@nvd264/ng-dynamic-form/validators/min-checkbox.directive.ts","ng://@nvd264/ng-dynamic-form/services/helper.service.ts","ng://@nvd264/ng-dynamic-form/lib/dynamic-form.component.ts","ng://@nvd264/ng-dynamic-form/lib/error-messages/error-messages.component.ts","ng://@nvd264/ng-dynamic-form/directives/dynamic-field.directive.ts","ng://@nvd264/ng-dynamic-form/lib/custom-field/custom-field.component.ts","ng://@nvd264/ng-dynamic-form/lib/dynamic-form.module.ts","ng://@nvd264/ng-dynamic-form/models/CheckboxControl.ts","ng://@nvd264/ng-dynamic-form/models/RadioGroupControl.ts","ng://@nvd264/ng-dynamic-form/models/TextareaControl.ts","ng://@nvd264/ng-dynamic-form/models/TextboxControl.ts","ng://@nvd264/ng-dynamic-form/models/CustomFieldControl.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","CHECKBOX","DROPDOWN","RADIO","TEXTAREA","TEXTBOX","CUSTOM","REQUIRED","MIN","MAX","MIN_LENGTH","MAX_LENGTH","EMAIL","PATTERN","defineProperty","FormControlBase","validators","findIndex","v","validate","ErrorTypes","options","key","label","order","undefined","controlType","tslib_1.__extends","DropdownControl","_this","_super","ControlTypes","multiple","hideSearchBox","searchText","loading","searchOnServer","supportLoadMore","labelValue","labelName","isArray","onSearch","loadMore","isObservable","pipe","tap","subscribe","FormErrorService","getValidatesInstance","validatorsList","validator","Validators","required","min","data","max","minLength","maxLength","email","getErrorMessage","errorType","find","message","getValidateByErrorType","Injectable","args","providedIn","FormControlService","toFormGroup","controls","group","forEach","c","generateCheckboxes","formErrorService","FormControl","FormGroup","control","chkControls","map","opt","checked","indexOf","validateRequired","FormArray","minSelectedCheckboxes","formArray","totalSelected","reduce","prev","markFormGroupTouched","formGroup","values","markAsTouched","getControlsData","result","getSelectedCheckboxesData","formData","checkboxControls","filter","Error","checkboxesData","convertCheckboxesToFormData","checkedValues","checkbox","resetSelectedOptionsFromFormData","selectedOptions","newSelectedOptions","HelperService","scrollDropdownToTop","document","querySelector","scrollTop","DynamicFormComponent","ngOnInit","originControls","JSON","parse","stringify","form","formControlService","watchFilterDropdownOptions","watchLoadMoreDropdownOptions","ngAfterViewInit","dynamicDropdown","dropdown","openedChange","takeUntil","unsubscribe$","isOpen","select","_elementRef","nativeElement","panel","controlKey","getAttribute","control_1","getControl","addEventListener","event","loadMoreOptionsOnScroll","filterControl","loadMoreControl","ngOnDestroy","complete","type","_a","target","clientHeight","scrollHeight","loadMoreOptions$","updateFormData","keys","checkboxControl","get","setValue","resetForm","preventDefault","onFilterOptions","filterOptions$","toLowerCase","debounceTime","distinctUntilKeyChanged","helperService","switchMap","labelValue_1","selectedOptionsValue_1","selectedOptions_1","newOptions","optionValue","setDropdownOptions","exhaustMap","dropdownControl","filteredOptions","onSubmit","invalid","submit","emit","Component","selector","template","Input","Output","ViewChildren","EventEmitter","Subject","controlTypes","ErrorMessagesComponent","errorTypes","DynamicFieldDirective","Directive","ViewContainerRef","viewContainerRef","CustomFieldComponent","loadComponent","componentFactory","componentFactoryResolver","resolveComponentFactory","component","customFieldHost","clear","componentRef","createComponent","instance","ComponentFactoryResolver","ViewChild","DynamicFormModule","NgModule","declarations","imports","FormsModule","ReactiveFormsModule","CommonModule","MatInputModule","MatSelectModule","MatCheckboxModule","MatRadioModule","MatButtonModule","MatProgressSpinnerModule","exports","CheckboxControl","RadioGroupControl","TextareaControl","TextboxControl","CustomFieldControl"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ControlTypes {\n  CHECKBOX = 'CHECKBOX',\n  DROPDOWN = 'DROPDOWN',\n  RADIO = 'RADIO',\n  TEXTAREA = 'TEXTAREA',\n  TEXTBOX = 'TEXTBOX',\n  CUSTOM = 'CUSTOM'\n}\n","export enum ErrorTypes {\n  REQUIRED = 'required',\n  MIN = 'min',\n  MAX = 'max',\n  MIN_LENGTH = 'minlength',\n  MAX_LENGTH = 'maxlength',\n  EMAIL = 'email',\n  PATTERN = 'pattern'\n}\n","import { IValidator } from '../interfaces/IValidator';\nimport { ErrorTypes } from '../enums/error-types.enum';\n\nexport class FormControlBase<T> {\n  value: T;\n  key: string;\n  label: string;\n  validators: IValidator[];\n  order: number;\n  controlType: string;\n\n  constructor(\n    options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      validators?: IValidator[];\n      order?: number;\n      controlType?: string;\n    } = {}\n  ) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n  }\n\n  get isRequired() {\n    return this.validators.findIndex(v => v.validate === ErrorTypes.REQUIRED) > -1;\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\nimport { tap } from 'rxjs/operators';\nimport { isObservable } from 'rxjs';\n\nexport class DropdownControl extends FormControlBase<any> {\n  controlType = ControlTypes.DROPDOWN;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n  multiple = false;\n  onSearch: any;\n  loadMore: any;\n  hideSearchBox = false;\n  searchText = '';\n  loading = false;\n  searchOnServer = false;\n  supportLoadMore = false;\n\n  constructor(options = {}) {\n    super(options);\n\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.multiple = !!options['multiple'];\n    this.searchText = options['searchText'] || '';\n    this.hideSearchBox = !!options['hideSearchBox'];\n\n    if(this.multiple && !Array.isArray(this.value)) {\n      // convert value to array for multi select\n      this.value = [this.value];\n    }\n\n    if(typeof options['onSearch'] === 'function') {\n      this.onSearch =  options['onSearch'];\n      this.searchOnServer = true;\n    }\n\n    if(typeof options['loadMore'] === 'function') {\n      this.loadMore =  options['loadMore'];\n      this.supportLoadMore = true;\n    }\n\n    // set options base type\n    if(isObservable(options['options'])) {\n      options['options'].pipe(\n        tap(() => this.loading = true)\n      ).subscribe(options => {\n        this.options = options;\n        this.loading = false;\n      });\n    } else {\n      this.options = options['options'] || [];\n    }\n  }\n}\n","import { ErrorTypes } from './../enums/error-types.enum';\nimport { ValidatorFn, Validators } from '@angular/forms';\nimport { Injectable } from '@angular/core';\nimport { IValidator } from '../interfaces/IValidator';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormErrorService {\n\n  constructor() { }\n\n  /**\n   * Map validates into instance of angular\n   * @param validates\n   */\n  getValidatesInstance(validators: IValidator[]): ValidatorFn[] {\n    const validatorsList = [];\n    for(let i = 0; i < validators.length; i++) {\n      const validator = validators[i];\n      if(validator.validate === ErrorTypes.REQUIRED) {\n        validatorsList.push(Validators.required);\n      }\n\n      if(validator.validate === ErrorTypes.MIN) {\n        validatorsList.push(Validators.min(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MAX) {\n        validatorsList.push(Validators.max(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MIN_LENGTH) {\n        validatorsList.push(Validators.minLength(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MAX_LENGTH) {\n        validatorsList.push(Validators.maxLength(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.EMAIL) {\n        validatorsList.push(Validators.email);\n      }\n    }\n\n    return validatorsList;\n  }\n\n  /**\n   * Get error message base error type\n   * @param validators\n   * @param errorType\n   */\n  getErrorMessage(validators: IValidator[], errorType: string): string {\n    const validator = validators.find(v => v.validate === errorType);\n    return validator ? validator.message : '';\n  }\n\n  /**\n   * Get validate by error type\n   * @param validators\n   * @param errorType\n   */\n  getValidateByErrorType(validators: IValidator[], errorType: string) {\n    return validators.find(v => v.validate === errorType);\n  }\n\n}\n","import { FormErrorService } from './form-error.service';\nimport { FormControlBase } from './../models/FormControlBase';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { minSelectedCheckboxes } from '../validators/min-checkbox.directive';\nimport { ErrorTypes } from '../enums/error-types.enum';\nimport { DropdownControl } from '../models/DropdownControl';\nimport { CheckboxControl } from '../models/CheckboxControl';\nimport { ControlTypes } from '../enums/control-types.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlService {\n  constructor(private formErrorService: FormErrorService) { }\n\n  /**\n   * Convert controls into form group\n   * @params controls\n   * @returns form group instance\n   */\n  toFormGroup(controls: FormControlBase<any>[]) {\n    const group: any = {};\n\n    controls.forEach(c => {\n      if (c.controlType === ControlTypes.CHECKBOX) {\n        group[c.key] = this.generateCheckboxes(c);\n      } else {\n        const validators = this.formErrorService.getValidatesInstance(c.validators);\n        group[c.key] = new FormControl(c.value || '', validators);\n      }\n    });\n    return new FormGroup(group);\n  }\n\n  /**\n   * Generate FormArray check boxes\n   * @param control <FormControlBase>\n   * @returns <FormArray>\n   */\n  private generateCheckboxes(control: FormControlBase<any>) {\n    const chkControls = control['options'].map(opt => {\n      // set checked for checkbox if value equal option\n      const value = control['labelValue'] || 'value';\n      let checked = false;\n      if (Array.isArray(control.value)) {\n        checked = control.value.indexOf(opt[value]) !== -1;\n      } else {\n        checked = opt[value] === control.value;\n      }\n      return new FormControl(checked);\n    });\n    // set required validate for checkbox\n    const validateRequired = this.formErrorService.getValidateByErrorType(control.validators, ErrorTypes.REQUIRED);\n    if (validateRequired) {\n      // set numbers of checked box is required\n      return new FormArray(chkControls, minSelectedCheckboxes(+validateRequired.data || 1));\n    }\n    return new FormArray(chkControls);\n  }\n\n  /**\n   * Marks all controls in a form group as touched\n   * @param formGroup - The form group to touch\n   */\n  markFormGroupTouched(formGroup: FormGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  /**\n   * Get controls data for form\n   * @param controls FormControlBase<any>[]\n   */\n  getControlsData(controls: FormControlBase<any>[]) {\n    const result = {};\n    controls.forEach(c => {\n      result[c.key] = c.value;\n    });\n\n    return result;\n  }\n\n  /**\n   * Get selected checkboxes data\n   * @param formData\n   */\n  getSelectedCheckboxesData(formData: any, controls: FormControlBase<any>[]) {\n    let checkboxControls = controls.filter(c => c.controlType === ControlTypes.CHECKBOX);\n    if (checkboxControls.length) {\n      for (let key in formData) {\n        const control = <DropdownControl>checkboxControls.find(c => c.key === key);\n        if (!control) {\n          continue;\n        }\n\n        const options = control.options || [];\n\n        if (formData[key].length !== options.length) {\n          throw Error(`Number of checkboxes and options doesn't equal.`);\n        }\n        const checkboxesData = [];\n        for (let i = 0; i < formData[key].length; i++) {\n          if (formData[key][i] === true) {\n            checkboxesData.push(options[i][control.labelValue]);\n          }\n        }\n\n        formData[key] = checkboxesData;\n      }\n    }\n    return formData;\n  }\n\n  /**\n   * Convert checkboxes to form data\n   * @param checkedValues\n   * @param control\n   */\n  convertCheckboxesToFormData(checkedValues: Array<string | number>, control: CheckboxControl) {\n    return control.options.map(\n      checkbox => {\n        return !!(checkedValues.indexOf(checkbox[control['labelValue']]) > -1);\n      }\n    );\n  }\n\n  /**\n   * Reset Selected Options From Form Data\n   * @param control\n   */\n  resetSelectedOptionsFromFormData(formData: Object, control: DropdownControl, controls: FormControlBase<any>[]) {\n    formData = this.getSelectedCheckboxesData(formData, controls);\n    const selectedOptions = formData[control.key];\n\n    const newSelectedOptions = [];\n    control.options.map(opt => {\n      if (selectedOptions.indexOf(opt[control.labelValue]) > -1) {\n        // option exist on new list\n        newSelectedOptions.push(opt[control.labelValue]);\n      }\n    });\n    return newSelectedOptions;\n  }\n}\n","import { FormArray, ValidatorFn } from '@angular/forms';\n\nexport function minSelectedCheckboxes(min = 1) {\n  const validator: ValidatorFn = (formArray: FormArray) => {\n    const totalSelected = formArray.controls\n      // get a list of checkbox values (boolean)\n      .map(control => control.value)\n      // total up the number of checked checkboxes\n      .reduce((prev, next) => (next ? prev + next : prev), 0);\n\n    // if the total is not greater than the minimum, return the error message\n    return totalSelected >= min ? null : { required: true };\n  };\n\n  return validator;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperService {\n\n  constructor() { }\n  /**\n   * Set scroll position into top\n   */\n  scrollDropdownToTop() {\n    document.querySelector('.panel-searchbox').scrollTop = 0;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChildren\n} from '@angular/core';\nimport { CheckboxControl } from '../models/CheckboxControl';\nimport { ControlTypes } from '../enums/control-types.enum';\nimport {\n  debounceTime,\n  distinctUntilKeyChanged,\n  exhaustMap,\n  map,\n  switchMap,\n  takeUntil,\n  finalize\n} from 'rxjs/operators';\nimport { DropdownControl } from './../models/DropdownControl';\nimport { FormGroup } from '@angular/forms';\nimport { FormControlBase } from './../models/FormControlBase';\nimport { FormControlService } from './../services/form-control.service';\nimport { HelperService } from '../services/helper.service';\nimport { IDynamicOptions } from '../interfaces/IDynamicOptions';\nimport { IFormAction } from '../interfaces/IFormAction';\nimport { MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'lib-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.scss']\n})\nexport class DynamicFormComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input() controls: FormControlBase<any>[] = [];\n  @Input() actions: IFormAction;\n  @Output() submit = new EventEmitter<any>();\n  @ViewChildren('dynamicDropdown') dynamicDropdown !: any[];\n\n  unsubscribe$ = new Subject<any>();\n  form: FormGroup;\n  controlTypes = ControlTypes;\n  originControls: FormControlBase<any>[];\n  filterOptions$ = new Subject<IDynamicOptions>();\n  filterControl: DropdownControl;\n  loadMoreOptions$ = new Subject<DropdownControl>();\n  loadMoreControl: DropdownControl;\n\n  constructor(\n    private formControlService: FormControlService,\n    private helperService: HelperService) {\n  }\n\n  ngOnInit() {\n    this.originControls = JSON.parse(JSON.stringify(this.controls));\n    this.form = this.formControlService.toFormGroup(this.controls);\n\n    this.watchFilterDropdownOptions();\n    this.watchLoadMoreDropdownOptions();\n  }\n\n  ngAfterViewInit() {\n    // loop through and add scroll event listener for each dropdown\n    this.dynamicDropdown.forEach(dropdown => {\n      dropdown.openedChange.pipe(\n        takeUntil(this.unsubscribe$)\n      ).subscribe((isOpen) => {\n        if (isOpen) {\n          const select: HTMLElement = dropdown._elementRef.nativeElement;\n          const panel: HTMLElement = dropdown.panel.nativeElement;\n          const controlKey = select.getAttribute('data-key');\n          const control = <DropdownControl>this.getControl(controlKey);\n          if (control && control.supportLoadMore) {\n            panel.addEventListener(\n              'scroll',\n              event => this.loadMoreOptionsOnScroll(\n                event, control\n              ));\n          }\n        } else {\n          this.filterControl = null;\n          this.loadMoreControl = null;\n        }\n      })\n    });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  /**\n   * Get form controls\n   */\n  get formControls() {\n    return this.form.controls;\n  }\n\n  /**\n   * Get control by key\n   * @param key\n   * @param type ControlTypes\n   */\n  getControl(key: string, type = null) {\n    return this.controls.find(c => {\n      if (type) {\n        return c.key === key && c.controlType === type;\n      }\n      return c.key === key;\n    });\n  }\n\n  /**\n   * Load more when scrolled to bottom\n   * @param event\n   * @param control\n   */\n  loadMoreOptionsOnScroll(event, control: DropdownControl) {\n    const { scrollTop, clientHeight, scrollHeight } = event.target;\n    if ((scrollTop + clientHeight) >= scrollHeight && control.supportLoadMore) {\n      this.loadMoreOptions$.next(control);\n    }\n  }\n\n  /**\n   * Update form data\n   * @param data\n   */\n  updateFormData(data: Object) {\n    Object.keys(data).forEach(controlKey => {\n      const checkboxControl = this.getControl(controlKey, ControlTypes.CHECKBOX);\n      let value;\n      if (checkboxControl) {\n        value = this.formControlService\n          .convertCheckboxesToFormData(\n            data[controlKey], <CheckboxControl>checkboxControl\n          );\n      } else {\n        value = data[controlKey];\n      }\n      if (this.form.get(controlKey)) {\n        this.form.get(controlKey).setValue(value);\n      }\n    });\n  }\n\n  /**\n   * Reset form\n   * @param e\n   */\n  resetForm(e) {\n    e.preventDefault();\n    for (let i = 0; i < this.controls.length; i++) {\n      if (this.controls[i] instanceof DropdownControl) {\n        // override only options of dropdown\n        // avoid error when function lost connect with parent\n        (<DropdownControl>this.controls[i]).options = (<DropdownControl>this.originControls[i]).options;\n      }\n    }\n    const formData = this.formControlService.getControlsData(this.originControls);\n    this.updateFormData(formData);\n  }\n\n  /**\n   * Filter options\n   * @param searchText\n   * @param control\n   */\n  onFilterOptions(searchText: string, control: DropdownControl) {\n    if (control.searchOnServer) {\n      this.filterOptions$.next({\n        control,\n        searchText\n      });\n    } else {\n      control.options.map(opt => {\n        // just set attribute hidden for selectop\n        // prevent lost data\n        if (opt[control.labelName].toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n          opt['hidden'] = false;\n        } else {\n          opt['hidden'] = true;\n        }\n      });\n    }\n  }\n\n  /**\n   * Watch filter dropdown options\n   */\n  watchFilterDropdownOptions() {\n    this.filterOptions$.pipe(\n      debounceTime(400),\n      distinctUntilKeyChanged('searchText'),\n      map(value => {\n        this.filterControl = value.control;\n        this.filterControl.loading = true;\n        this.helperService.scrollDropdownToTop();\n        return value;\n      }),\n      switchMap(filter => filter.control.onSearch(filter.searchText)),\n      takeUntil(this.unsubscribe$)\n    ).subscribe(options => {\n      if (Array.isArray(options) && this.filterControl) {\n        const { key, labelValue } = this.filterControl;\n        let formData = { ...this.form.value };\n        formData = this.formControlService.getSelectedCheckboxesData(formData, this.controls);\n\n        const selectedOptionsValue = formData[key];\n        const selectedOptions = this.filterControl.options.filter(\n          opt => selectedOptionsValue.indexOf(opt[labelValue]) > -1\n        );\n\n        // remove duplicated item on selected options\n        const newOptions = options.filter(opt => {\n          const optionValue = opt[labelValue];\n          if (selectedOptions.find(s =>\n            (<DropdownControl>s)[labelValue] === optionValue)\n          ) {\n            return false;\n          }\n          return true;\n        });\n        // make selected element on top of dropdown\n        this.setDropdownOptions(key, [...selectedOptions, ...newOptions]);\n        this.filterControl.loading = false;\n      }\n    });\n  }\n\n  /**\n   * Watch load more dropdown option\n   */\n  watchLoadMoreDropdownOptions() {\n    this.loadMoreOptions$\n      .pipe(\n        debounceTime(400),\n        map(control => {\n          this.loadMoreControl = control;\n          this.loadMoreControl.loading = true;\n          return control;\n        }),\n        exhaustMap(control => control.loadMore(control.searchText)),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe(options => {\n        const dropdownControl = <DropdownControl>this.getControl(this.loadMoreControl.key);\n        const { labelValue } = dropdownControl;\n        if (Array.isArray(options) && options.length) {\n          // filter options\n          const filteredOptions = options.filter(opt => {\n            if (dropdownControl.options.find(o => o[labelValue] === opt[labelValue])) {\n              return false;\n            }\n            return true;\n          });\n          dropdownControl.options = [...dropdownControl.options, ...filteredOptions];\n        }\n        this.loadMoreControl.loading = false;\n      });\n  }\n\n  /**\n   * Set dropdown options\n   * @param controlKey\n   * @param options\n   */\n  setDropdownOptions(controlKey: string, options: any[]) {\n    const control = <DropdownControl>this.getControl(controlKey, ControlTypes.DROPDOWN);\n    if (control) {\n      control.options = options;\n\n      // reset selected data from form\n      const newSelectedOptions = this.formControlService\n        .resetSelectedOptionsFromFormData(\n          this.form.value,\n          control,\n          this.controls\n        );\n      this.updateFormData({\n        [controlKey]: newSelectedOptions\n      })\n    }\n  }\n\n  /**\n   * Emit form data to parent\n   * @param e\n   */\n  onSubmit(e) {\n    e.preventDefault();\n    if (this.form.invalid) {\n      this.formControlService.markFormGroupTouched(this.form);\n      return false;\n    }\n\n    let formData = { ...this.form.value };\n    formData = this.formControlService.getSelectedCheckboxesData(formData, this.controls);\n    this.submit.emit(formData);\n  }\n}\n","import { ErrorTypes } from './../../enums/error-types.enum';\nimport { FormErrorService } from './../../services/form-error.service';\nimport { Component, Input } from '@angular/core';\nimport { IValidator } from '../../interfaces/IValidator';\n\n@Component({\n  selector: 'error-messages',\n  templateUrl: './error-messages.component.html',\n  styleUrls: ['./error-messages.component.scss']\n})\nexport class ErrorMessagesComponent {\n  @Input() errors: any;\n  @Input() validators: IValidator[] = [];\n\n  errorTypes = ErrorTypes;\n\n  constructor(private formErrorService: FormErrorService) {}\n\n  getErrorMessage(errorType: string): string {\n    return this.formErrorService.getErrorMessage(this.validators, errorType);\n  }\n\n}\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appDynamicField]'\n})\nexport class DynamicFieldDirective {\n\n  constructor(public viewContainerRef: ViewContainerRef) { }\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Component, OnInit, Input, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { DynamicFieldDirective } from '../../directives/dynamic-field.directive';\nimport { CustomFieldControl } from '../../models/CustomFieldControl';\n\n@Component({\n  selector: 'custom-field',\n  templateUrl: './custom-field.component.html',\n  styleUrls: ['./custom-field.component.scss']\n})\nexport class CustomFieldComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() control: CustomFieldControl;\n  @ViewChild(DynamicFieldDirective) customFieldHost: DynamicFieldDirective;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit() {\n    this.loadComponent();\n  }\n\n  loadComponent() {\n    let componentFactory = this.componentFactoryResolver\n                                .resolveComponentFactory(this.control.component);\n    let viewContainerRef = this.customFieldHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    let componentRef = viewContainerRef.createComponent(componentFactory);\n    componentRef.instance['form'] = this.form;\n    componentRef.instance['controlKey'] = this.control.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DynamicFormComponent } from './dynamic-form.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule, MatCheckboxModule, MatRadioModule, MatSelectModule, MatButtonModule } from '@angular/material';\nimport { ErrorMessagesComponent } from './error-messages/error-messages.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { DynamicFieldDirective } from '../directives/dynamic-field.directive';\nimport { CustomFieldComponent } from './custom-field/custom-field.component';\n\n@NgModule({\n  declarations: [\n    DynamicFormComponent,\n    ErrorMessagesComponent,\n    DynamicFieldDirective,\n    CustomFieldComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    // BrowserAnimationsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatButtonModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [DynamicFormComponent]\n})\nexport class DynamicFormModule { }\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class CheckboxControl extends FormControlBase<boolean[]> {\n  controlType = ControlTypes.CHECKBOX;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n\n  constructor(options = {}) {\n    super(options);\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.options = options['options'] || [];\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class RadioGroupControl extends FormControlBase<string | number> {\n  controlType = ControlTypes.RADIO;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n\n  constructor(options = {}) {\n    super(options);\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.options = options['options'] || [];\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class TextareaControl extends FormControlBase<string> {\n    controlType = ControlTypes.TEXTAREA;\n\n    constructor(options = {}) {\n        super(options);\n    }\n}\n","import { ControlTypes } from './../enums/control-types.enum';\nimport { FormControlBase } from './FormControlBase';\n\nexport class TextboxControl extends FormControlBase<string> {\n    controlType = ControlTypes.TEXTBOX;\n    type: string;\n\n    constructor(options = {}) {\n        super(options);\n        // set type for text box\n        // exam: text, number...\n        this.type = options['type'] || '';\n    }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class CustomFieldControl extends FormControlBase<any> {\n  controlType = ControlTypes.CUSTOM;\n  component: any;\n\n  constructor(options = {}) {\n    super(options);\n\n    if(options['component']) {\n      this.component = options['component'];\n    }\n  }\n}\n"]}