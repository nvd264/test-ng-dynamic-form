{"version":3,"file":"nvd264-ng-dynamic-form.js.map","sources":["ng://@nvd264/ng-dynamic-form/enums/control-types.enum.ts","ng://@nvd264/ng-dynamic-form/enums/error-types.enum.ts","ng://@nvd264/ng-dynamic-form/models/FormControlBase.ts","ng://@nvd264/ng-dynamic-form/models/DropdownControl.ts","ng://@nvd264/ng-dynamic-form/services/form-error.service.ts","ng://@nvd264/ng-dynamic-form/validators/min-checkbox.directive.ts","ng://@nvd264/ng-dynamic-form/services/form-control.service.ts","ng://@nvd264/ng-dynamic-form/services/helper.service.ts","ng://@nvd264/ng-dynamic-form/lib/dynamic-form.component.ts","ng://@nvd264/ng-dynamic-form/lib/error-messages/error-messages.component.ts","ng://@nvd264/ng-dynamic-form/directives/dynamic-field.directive.ts","ng://@nvd264/ng-dynamic-form/models/CustomFieldControl.ts","ng://@nvd264/ng-dynamic-form/lib/custom-field/custom-field.component.ts","ng://@nvd264/ng-dynamic-form/lib/dynamic-form.module.ts","ng://@nvd264/ng-dynamic-form/models/CheckboxControl.ts","ng://@nvd264/ng-dynamic-form/models/RadioGroupControl.ts","ng://@nvd264/ng-dynamic-form/models/TextareaControl.ts","ng://@nvd264/ng-dynamic-form/models/TextboxControl.ts"],"sourcesContent":["export enum ControlTypes {\n  CHECKBOX = 'CHECKBOX',\n  DROPDOWN = 'DROPDOWN',\n  RADIO = 'RADIO',\n  TEXTAREA = 'TEXTAREA',\n  TEXTBOX = 'TEXTBOX',\n  CUSTOM = 'CUSTOM'\n}\n","export enum ErrorTypes {\n  REQUIRED = 'required',\n  MIN = 'min',\n  MAX = 'max',\n  MIN_LENGTH = 'minlength',\n  MAX_LENGTH = 'maxlength',\n  EMAIL = 'email',\n  PATTERN = 'pattern'\n}\n","import { IValidator } from '../interfaces/IValidator';\nimport { ErrorTypes } from '../enums/error-types.enum';\n\nexport class FormControlBase<T> {\n  value: T;\n  key: string;\n  label: string;\n  validators: IValidator[];\n  order: number;\n  controlType: string;\n\n  constructor(\n    options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      validators?: IValidator[];\n      order?: number;\n      controlType?: string;\n    } = {}\n  ) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n  }\n\n  get isRequired() {\n    return this.validators.findIndex(v => v.validate === ErrorTypes.REQUIRED) > -1;\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\nimport { tap } from 'rxjs/operators';\nimport { isObservable } from 'rxjs';\n\nexport class DropdownControl extends FormControlBase<any> {\n  controlType = ControlTypes.DROPDOWN;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n  multiple = false;\n  onSearch: any;\n  loadMore: any;\n  hideSearchBox = false;\n  searchText = '';\n  loading = false;\n  searchOnServer = false;\n  supportLoadMore = false;\n\n  constructor(options = {}) {\n    super(options);\n\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.multiple = !!options['multiple'];\n    this.searchText = options['searchText'] || '';\n    this.hideSearchBox = !!options['hideSearchBox'];\n\n    if(this.multiple && !Array.isArray(this.value)) {\n      // convert value to array for multi select\n      this.value = [this.value];\n    }\n\n    if(typeof options['onSearch'] === 'function') {\n      this.onSearch =  options['onSearch'];\n      this.searchOnServer = true;\n    }\n\n    if(typeof options['loadMore'] === 'function') {\n      this.loadMore =  options['loadMore'];\n      this.supportLoadMore = true;\n    }\n\n    // set options base type\n    if(isObservable(options['options'])) {\n      options['options'].pipe(\n        tap(() => this.loading = true)\n      ).subscribe(options => {\n        this.options = options;\n        this.loading = false;\n      });\n    } else {\n      this.options = options['options'] || [];\n    }\n  }\n}\n","import { ErrorTypes } from './../enums/error-types.enum';\nimport { ValidatorFn, Validators } from '@angular/forms';\nimport { Injectable } from '@angular/core';\nimport { IValidator } from '../interfaces/IValidator';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormErrorService {\n\n  constructor() { }\n\n  /**\n   * Map validates into instance of angular\n   * @param validates\n   */\n  getValidatesInstance(validators: IValidator[]): ValidatorFn[] {\n    const validatorsList = [];\n    for(let i = 0; i < validators.length; i++) {\n      const validator = validators[i];\n      if(validator.validate === ErrorTypes.REQUIRED) {\n        validatorsList.push(Validators.required);\n      }\n\n      if(validator.validate === ErrorTypes.MIN) {\n        validatorsList.push(Validators.min(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MAX) {\n        validatorsList.push(Validators.max(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MIN_LENGTH) {\n        validatorsList.push(Validators.minLength(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.MAX_LENGTH) {\n        validatorsList.push(Validators.maxLength(validator.data));\n      }\n\n      if(validator.validate === ErrorTypes.EMAIL) {\n        validatorsList.push(Validators.email);\n      }\n    }\n\n    return validatorsList;\n  }\n\n  /**\n   * Get error message base error type\n   * @param validators\n   * @param errorType\n   */\n  getErrorMessage(validators: IValidator[], errorType: string): string {\n    const validator = validators.find(v => v.validate === errorType);\n    return validator ? validator.message : '';\n  }\n\n  /**\n   * Get validate by error type\n   * @param validators\n   * @param errorType\n   */\n  getValidateByErrorType(validators: IValidator[], errorType: string) {\n    return validators.find(v => v.validate === errorType);\n  }\n\n}\n","import { FormArray, ValidatorFn } from '@angular/forms';\n\nexport function minSelectedCheckboxes(min = 1) {\n  const validator: ValidatorFn = (formArray: FormArray) => {\n    const totalSelected = formArray.controls\n      // get a list of checkbox values (boolean)\n      .map(control => control.value)\n      // total up the number of checked checkboxes\n      .reduce((prev, next) => (next ? prev + next : prev), 0);\n\n    // if the total is not greater than the minimum, return the error message\n    return totalSelected >= min ? null : { required: true };\n  };\n\n  return validator;\n}\n","import { FormErrorService } from './form-error.service';\nimport { FormControlBase } from './../models/FormControlBase';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { minSelectedCheckboxes } from '../validators/min-checkbox.directive';\nimport { ErrorTypes } from '../enums/error-types.enum';\nimport { DropdownControl } from '../models/DropdownControl';\nimport { CheckboxControl } from '../models/CheckboxControl';\nimport { ControlTypes } from '../enums/control-types.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlService {\n  constructor(private formErrorService: FormErrorService) { }\n\n  /**\n   * Convert controls into form group\n   * @params controls\n   * @returns form group instance\n   */\n  toFormGroup(controls: FormControlBase<any>[]) {\n    const group: any = {};\n\n    controls.forEach(c => {\n      if (c.controlType === ControlTypes.CHECKBOX) {\n        group[c.key] = this.generateCheckboxes(c);\n      } else {\n        const validators = this.formErrorService.getValidatesInstance(c.validators);\n        group[c.key] = new FormControl(c.value || '', validators);\n      }\n    });\n    return new FormGroup(group);\n  }\n\n  /**\n   * Generate FormArray check boxes\n   * @param control <FormControlBase>\n   * @returns <FormArray>\n   */\n  private generateCheckboxes(control: FormControlBase<any>) {\n    const chkControls = control['options'].map(opt => {\n      // set checked for checkbox if value equal option\n      const value = control['labelValue'] || 'value';\n      let checked = false;\n      if (Array.isArray(control.value)) {\n        checked = control.value.indexOf(opt[value]) !== -1;\n      } else {\n        checked = opt[value] === control.value;\n      }\n      return new FormControl(checked);\n    });\n    // set required validate for checkbox\n    const validateRequired = this.formErrorService.getValidateByErrorType(control.validators, ErrorTypes.REQUIRED);\n    if (validateRequired) {\n      // set numbers of checked box is required\n      return new FormArray(chkControls, minSelectedCheckboxes(+validateRequired.data || 1));\n    }\n    return new FormArray(chkControls);\n  }\n\n  /**\n   * Marks all controls in a form group as touched\n   * @param formGroup - The form group to touch\n   */\n  markFormGroupTouched(formGroup: FormGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  /**\n   * Get controls data for form\n   * @param controls FormControlBase<any>[]\n   */\n  getControlsData(controls: FormControlBase<any>[]) {\n    const result = {};\n    controls.forEach(c => {\n      result[c.key] = c.value;\n    });\n\n    return result;\n  }\n\n  /**\n   * Get selected checkboxes data\n   * @param formData\n   */\n  getSelectedCheckboxesData(formData: any, controls: FormControlBase<any>[]) {\n    let checkboxControls = controls.filter(c => c.controlType === ControlTypes.CHECKBOX);\n    if (checkboxControls.length) {\n      for (let key in formData) {\n        const control = <DropdownControl>checkboxControls.find(c => c.key === key);\n        if (!control) {\n          continue;\n        }\n\n        const options = control.options || [];\n\n        if (formData[key].length !== options.length) {\n          throw Error(`Number of checkboxes and options doesn't equal.`);\n        }\n        const checkboxesData = [];\n        for (let i = 0; i < formData[key].length; i++) {\n          if (formData[key][i] === true) {\n            checkboxesData.push(options[i][control.labelValue]);\n          }\n        }\n\n        formData[key] = checkboxesData;\n      }\n    }\n    return formData;\n  }\n\n  /**\n   * Convert checkboxes to form data\n   * @param checkedValues\n   * @param control\n   */\n  convertCheckboxesToFormData(checkedValues: Array<string | number>, control: CheckboxControl) {\n    return control.options.map(\n      checkbox => {\n        return !!(checkedValues.indexOf(checkbox[control['labelValue']]) > -1);\n      }\n    );\n  }\n\n  /**\n   * Reset Selected Options From Form Data\n   * @param control\n   */\n  resetSelectedOptionsFromFormData(formData: Object, control: DropdownControl, controls: FormControlBase<any>[]) {\n    formData = this.getSelectedCheckboxesData(formData, controls);\n    const selectedOptions = formData[control.key];\n\n    const newSelectedOptions = [];\n    control.options.map(opt => {\n      if (selectedOptions.indexOf(opt[control.labelValue]) > -1) {\n        // option exist on new list\n        newSelectedOptions.push(opt[control.labelValue]);\n      }\n    });\n    return newSelectedOptions;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperService {\n\n  constructor() { }\n  /**\n   * Set scroll position into top\n   */\n  scrollDropdownToTop() {\n    document.querySelector('.panel-searchbox').scrollTop = 0;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChildren\n} from '@angular/core';\nimport { CheckboxControl } from '../models/CheckboxControl';\nimport { ControlTypes } from '../enums/control-types.enum';\nimport {\n  debounceTime,\n  distinctUntilKeyChanged,\n  exhaustMap,\n  map,\n  switchMap,\n  takeUntil,\n  finalize\n} from 'rxjs/operators';\nimport { DropdownControl } from './../models/DropdownControl';\nimport { FormGroup } from '@angular/forms';\nimport { FormControlBase } from './../models/FormControlBase';\nimport { FormControlService } from './../services/form-control.service';\nimport { HelperService } from '../services/helper.service';\nimport { IDynamicOptions } from '../interfaces/IDynamicOptions';\nimport { IFormAction } from '../interfaces/IFormAction';\nimport { MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'lib-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.scss']\n})\nexport class DynamicFormComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input() controls: FormControlBase<any>[] = [];\n  @Input() actions: IFormAction;\n  @Output() submit = new EventEmitter<any>();\n  @ViewChildren('dynamicDropdown') dynamicDropdown !: any[];\n\n  unsubscribe$ = new Subject<any>();\n  form: FormGroup;\n  controlTypes = ControlTypes;\n  originControls: FormControlBase<any>[];\n  filterOptions$ = new Subject<IDynamicOptions>();\n  filterControl: DropdownControl;\n  loadMoreOptions$ = new Subject<DropdownControl>();\n  loadMoreControl: DropdownControl;\n\n  constructor(\n    private formControlService: FormControlService,\n    private helperService: HelperService) {\n  }\n\n  ngOnInit() {\n    this.originControls = JSON.parse(JSON.stringify(this.controls));\n    this.form = this.formControlService.toFormGroup(this.controls);\n\n    this.watchFilterDropdownOptions();\n    this.watchLoadMoreDropdownOptions();\n  }\n\n  ngAfterViewInit() {\n    // loop through and add scroll event listener for each dropdown\n    this.dynamicDropdown.forEach(dropdown => {\n      dropdown.openedChange.pipe(\n        takeUntil(this.unsubscribe$)\n      ).subscribe((isOpen) => {\n        if (isOpen) {\n          const select: HTMLElement = dropdown._elementRef.nativeElement;\n          const panel: HTMLElement = dropdown.panel.nativeElement;\n          const controlKey = select.getAttribute('data-key');\n          const control = <DropdownControl>this.getControl(controlKey);\n          if (control && control.supportLoadMore) {\n            panel.addEventListener(\n              'scroll',\n              event => this.loadMoreOptionsOnScroll(\n                event, control\n              ));\n          }\n        } else {\n          this.filterControl = null;\n          this.loadMoreControl = null;\n        }\n      })\n    });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  /**\n   * Get form controls\n   */\n  get formControls() {\n    return this.form.controls;\n  }\n\n  /**\n   * Get control by key\n   * @param key\n   * @param type ControlTypes\n   */\n  getControl(key: string, type = null) {\n    return this.controls.find(c => {\n      if (type) {\n        return c.key === key && c.controlType === type;\n      }\n      return c.key === key;\n    });\n  }\n\n  /**\n   * Load more when scrolled to bottom\n   * @param event\n   * @param control\n   */\n  loadMoreOptionsOnScroll(event, control: DropdownControl) {\n    const { scrollTop, clientHeight, scrollHeight } = event.target;\n    if ((scrollTop + clientHeight) >= scrollHeight && control.supportLoadMore) {\n      this.loadMoreOptions$.next(control);\n    }\n  }\n\n  /**\n   * Update form data\n   * @param data\n   */\n  updateFormData(data: Object) {\n    Object.keys(data).forEach(controlKey => {\n      const checkboxControl = this.getControl(controlKey, ControlTypes.CHECKBOX);\n      let value;\n      if (checkboxControl) {\n        value = this.formControlService\n          .convertCheckboxesToFormData(\n            data[controlKey], <CheckboxControl>checkboxControl\n          );\n      } else {\n        value = data[controlKey];\n      }\n      if (this.form.get(controlKey)) {\n        this.form.get(controlKey).setValue(value);\n      }\n    });\n  }\n\n  /**\n   * Reset form\n   * @param e\n   */\n  resetForm(e) {\n    e.preventDefault();\n    for (let i = 0; i < this.controls.length; i++) {\n      if (this.controls[i] instanceof DropdownControl) {\n        // override only options of dropdown\n        // avoid error when function lost connect with parent\n        (<DropdownControl>this.controls[i]).options = (<DropdownControl>this.originControls[i]).options;\n      }\n    }\n    const formData = this.formControlService.getControlsData(this.originControls);\n    this.updateFormData(formData);\n  }\n\n  /**\n   * Filter options\n   * @param searchText\n   * @param control\n   */\n  onFilterOptions(searchText: string, control: DropdownControl) {\n    if (control.searchOnServer) {\n      this.filterOptions$.next({\n        control,\n        searchText\n      });\n    } else {\n      control.options.map(opt => {\n        // just set attribute hidden for selectop\n        // prevent lost data\n        if (opt[control.labelName].toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n          opt['hidden'] = false;\n        } else {\n          opt['hidden'] = true;\n        }\n      });\n    }\n  }\n\n  /**\n   * Watch filter dropdown options\n   */\n  watchFilterDropdownOptions() {\n    this.filterOptions$.pipe(\n      debounceTime(400),\n      distinctUntilKeyChanged('searchText'),\n      map(value => {\n        this.filterControl = value.control;\n        this.filterControl.loading = true;\n        this.helperService.scrollDropdownToTop();\n        return value;\n      }),\n      switchMap(filter => filter.control.onSearch(filter.searchText)),\n      takeUntil(this.unsubscribe$)\n    ).subscribe(options => {\n      if (Array.isArray(options) && this.filterControl) {\n        const { key, labelValue } = this.filterControl;\n        let formData = { ...this.form.value };\n        formData = this.formControlService.getSelectedCheckboxesData(formData, this.controls);\n\n        const selectedOptionsValue = formData[key];\n        const selectedOptions = this.filterControl.options.filter(\n          opt => selectedOptionsValue.indexOf(opt[labelValue]) > -1\n        );\n\n        // remove duplicated item on selected options\n        const newOptions = options.filter(opt => {\n          const optionValue = opt[labelValue];\n          if (selectedOptions.find(s =>\n            (<DropdownControl>s)[labelValue] === optionValue)\n          ) {\n            return false;\n          }\n          return true;\n        });\n        // make selected element on top of dropdown\n        this.setDropdownOptions(key, [...selectedOptions, ...newOptions]);\n        this.filterControl.loading = false;\n      }\n    });\n  }\n\n  /**\n   * Watch load more dropdown option\n   */\n  watchLoadMoreDropdownOptions() {\n    this.loadMoreOptions$\n      .pipe(\n        debounceTime(400),\n        map(control => {\n          this.loadMoreControl = control;\n          this.loadMoreControl.loading = true;\n          return control;\n        }),\n        exhaustMap(control => control.loadMore(control.searchText)),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe(options => {\n        const dropdownControl = <DropdownControl>this.getControl(this.loadMoreControl.key);\n        const { labelValue } = dropdownControl;\n        if (Array.isArray(options) && options.length) {\n          // filter options\n          const filteredOptions = options.filter(opt => {\n            if (dropdownControl.options.find(o => o[labelValue] === opt[labelValue])) {\n              return false;\n            }\n            return true;\n          });\n          dropdownControl.options = [...dropdownControl.options, ...filteredOptions];\n        }\n        this.loadMoreControl.loading = false;\n      });\n  }\n\n  /**\n   * Set dropdown options\n   * @param controlKey\n   * @param options\n   */\n  setDropdownOptions(controlKey: string, options: any[]) {\n    const control = <DropdownControl>this.getControl(controlKey, ControlTypes.DROPDOWN);\n    if (control) {\n      control.options = options;\n\n      // reset selected data from form\n      const newSelectedOptions = this.formControlService\n        .resetSelectedOptionsFromFormData(\n          this.form.value,\n          control,\n          this.controls\n        );\n      this.updateFormData({\n        [controlKey]: newSelectedOptions\n      })\n    }\n  }\n\n  /**\n   * Emit form data to parent\n   * @param e\n   */\n  onSubmit(e) {\n    e.preventDefault();\n    if (this.form.invalid) {\n      this.formControlService.markFormGroupTouched(this.form);\n      return false;\n    }\n\n    let formData = { ...this.form.value };\n    formData = this.formControlService.getSelectedCheckboxesData(formData, this.controls);\n    this.submit.emit(formData);\n  }\n}\n","import { ErrorTypes } from './../../enums/error-types.enum';\nimport { FormErrorService } from './../../services/form-error.service';\nimport { Component, Input } from '@angular/core';\nimport { IValidator } from '../../interfaces/IValidator';\n\n@Component({\n  selector: 'error-messages',\n  templateUrl: './error-messages.component.html',\n  styleUrls: ['./error-messages.component.scss']\n})\nexport class ErrorMessagesComponent {\n  @Input() errors: any;\n  @Input() validators: IValidator[] = [];\n\n  errorTypes = ErrorTypes;\n\n  constructor(private formErrorService: FormErrorService) {}\n\n  getErrorMessage(errorType: string): string {\n    return this.formErrorService.getErrorMessage(this.validators, errorType);\n  }\n\n}\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appDynamicField]'\n})\nexport class DynamicFieldDirective {\n\n  constructor(public viewContainerRef: ViewContainerRef) { }\n\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class CustomFieldControl extends FormControlBase<any> {\n  controlType = ControlTypes.CUSTOM;\n  component: any;\n\n  constructor(options = {}) {\n    super(options);\n\n    if(options['component']) {\n      this.component = options['component'];\n    }\n  }\n}\n","import { FormGroup } from '@angular/forms';\nimport { Component, OnInit, Input, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { DynamicFieldDirective } from '../../directives/dynamic-field.directive';\nimport { CustomFieldControl } from '../../models/CustomFieldControl';\n\n@Component({\n  selector: 'custom-field',\n  templateUrl: './custom-field.component.html',\n  styleUrls: ['./custom-field.component.scss']\n})\nexport class CustomFieldComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() control: CustomFieldControl;\n  @ViewChild(DynamicFieldDirective) customFieldHost: DynamicFieldDirective;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit() {\n    this.loadComponent();\n  }\n\n  loadComponent() {\n    let componentFactory = this.componentFactoryResolver\n                                .resolveComponentFactory(this.control.component);\n    let viewContainerRef = this.customFieldHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    let componentRef = viewContainerRef.createComponent(componentFactory);\n    componentRef.instance['form'] = this.form;\n    componentRef.instance['controlKey'] = this.control.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DynamicFormComponent } from './dynamic-form.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule, MatCheckboxModule, MatRadioModule, MatSelectModule, MatButtonModule } from '@angular/material';\nimport { ErrorMessagesComponent } from './error-messages/error-messages.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { DynamicFieldDirective } from '../directives/dynamic-field.directive';\nimport { CustomFieldComponent } from './custom-field/custom-field.component';\n\n@NgModule({\n  declarations: [\n    DynamicFormComponent,\n    ErrorMessagesComponent,\n    DynamicFieldDirective,\n    CustomFieldComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatButtonModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [DynamicFormComponent]\n})\nexport class DynamicFormModule { }\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class CheckboxControl extends FormControlBase<boolean[]> {\n  controlType = ControlTypes.CHECKBOX;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n\n  constructor(options = {}) {\n    super(options);\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.options = options['options'] || [];\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class RadioGroupControl extends FormControlBase<string | number> {\n  controlType = ControlTypes.RADIO;\n  labelValue: string;\n  labelName: string;\n  options: { value: string; label: string }[] = [];\n\n  constructor(options = {}) {\n    super(options);\n    this.labelValue = options['labelValue'] || '';\n    this.labelName = options['labelName'] || '';\n    this.options = options['options'] || [];\n  }\n}\n","import { FormControlBase } from './FormControlBase';\nimport { ControlTypes } from '../enums/control-types.enum';\n\nexport class TextareaControl extends FormControlBase<string> {\n    controlType = ControlTypes.TEXTAREA;\n\n    constructor(options = {}) {\n        super(options);\n    }\n}\n","import { ControlTypes } from './../enums/control-types.enum';\nimport { FormControlBase } from './FormControlBase';\n\nexport class TextboxControl extends FormControlBase<string> {\n    controlType = ControlTypes.TEXTBOX;\n    type: string;\n\n    constructor(options = {}) {\n        super(options);\n        // set type for text box\n        // exam: text, number...\n        this.type = options['type'] || '';\n    }\n}\n"],"names":[],"mappings":"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"}
